{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,m2BCQzB,oBAAyBC,GACvBC,QAAQC,IAAI,6CAEZ,MAAMC,EAASC,EAAOC,UAAUC,iBAAiB,4BAC3CC,EAAiBJ,EAAOK,IAA+B,aAAc,CAAC,GACtEC,EAAuBN,EAAOK,IAAa,iBAAiB,GAElE,IAAIE,EAAgBN,EAAOO,SAASC,gBAClC,2CACAC,UACE,MAAMC,EAASV,EAAOW,OAAOC,iBAC7B,IAAKF,EAEH,YADAV,EAAOW,OAAOE,iBAAiB,2BAIjC,MAAM,SAAEC,EAAQ,WAAEC,GAAeL,EAC3BM,EAAOF,EAASG,UAChBC,EAAaJ,EAASI,WACtBC,EAAgBnB,EAAOC,UAAUmB,UAAY,GAEnD,IACE,IAAIC,EAAgBL,EAChBM,EAAYnB,EAAee,IAoEvC,SAA6BA,GAc3B,MAbqD,CACnDK,WAAY,WACZC,WAAY,SACZC,OAAQ,QACRC,IAAK,eACLC,GAAI,QACJC,KAAM,UACNC,KAAM,qBACNC,IAAK,gBACLC,KAAM,WACNC,SAAU,eAGad,IAAe,UAC1C,CAnFsDe,CAAoBf,GASlE,GANKgB,EAAqBZ,KACxBtB,EAAOW,OAAOwB,mBAAmB,cAAcb,2CAC/CA,EAAY,YAII,aAAdA,EAA0B,CACnC,IAAKY,EAAqB,YAEzB,YADAlC,EAAOW,OAAOE,iBAAiB,0EAIzB,MAAMuB,EAAqBC,EAAKC,KAAKnB,EAAe,oBAC9CoB,EAAkBC,EAAGC,WAAWL,GAClCM,KAAKC,MAAMH,EAAGI,aAAaR,EAAoB,SAC/C,CAAES,OAAQC,EAAkB5B,IAEhCG,QAAsB0B,EAASC,OAAOhC,EAAMuB,EAC9C,CAGA,GAAkB,WAAdjB,EAAwB,CAC1B,IAAKY,EAAqB,UAExB,YADAlC,EAAOW,OAAOE,iBAAiB,sEAIjC,MAAMoC,EAAS,IAAI,EAAAC,OAAO,CAAEC,KAAK,IAC3BC,QAAgBH,EAAOI,SAAShC,GACtCA,EAAgB+B,EAAQ,GAAGE,QAAUjC,CACvC,CAGAA,EAiFR,SAAsBkC,EAAiBvC,GACrC,IACE,OAAO,IAAAwC,UAASD,EAAS,CAAEE,MAAOzC,EAAM0C,SAAU,QACpD,CAAE,MAAOC,GAEP,OADA9D,QAAQ8D,MAAM,2BAA2BJ,KAAYI,GAC9C3C,CACT,CACF,CAxFwB4C,CAAatC,EAAWD,GAGxCX,EAAOmD,MAAMC,IACX/C,EAAWgD,SAASC,IAC3BF,EAAYG,QAAQD,EAAUE,QAAU,IAAIlE,EAAOmE,MAAM,EAAG,EAAGrD,EAASsD,UAAW,GAAKJ,EAAW3C,EAAc,GAChH,IAGIrB,EAAOW,OAAO0D,uBAAuB,kBAAkB/C,KACzD,CAAE,MAAOqC,GACP9D,QAAQ8D,MAAM,oCAAqCA,GACnD3D,EAAOW,OAAOE,iBAAiB,sBAAuB8C,EAAgBW,UACxE,KAIJtE,EAAOC,UAAUsE,wBAAwBC,IACnCzE,EAAOK,IAAI,oBAAoB,IACjCJ,EAAOO,SAASkE,eAAe,0CACjC,IAGEpE,GAmEN,WACE,MAAMc,EAAgBnB,EAAOC,UAAUmB,SACvC,IAAKD,EAAgB,OAErB,MAAMuD,EAAcrC,EAAKC,KAAKnB,EAAe,OAAQ,QAAS,cAC9D,GAAIqB,EAAGC,WAAWiC,GAAe,OAQjClC,EAAGmC,cAAcD,EANE,4KAOnBlC,EAAGoC,UAAUF,EAAa,OAE1B1E,EAAOW,OAAO0D,uBAAuB,qDACvC,CAnFIQ,GAGFjF,EAAQkF,cAAcC,KAAKzE,EAC7B,EAEA,wBAA8B,EAjG9B,kBACA,YACA,SACA,YACA,YACA,SACA,YA8GA,SAASwC,EAAkB5B,GAC1B,OAAQA,GACN,IAAK,aACL,IAAK,aAcL,QACD,MAAO,QAbN,IAAK,OACN,MAAO,OACN,IAAK,OACN,MAAO,OACN,IAAK,MACL,IAAK,OACL,IAAK,OACN,MAAO,MACN,IAAK,OACN,MAAO,OACN,IAAK,WACN,MAAO,WAIP,CAEF,SAASgB,EAAqBZ,GAC5B,IACE,MAAMiC,EAA4B,UAAlByB,EAAGC,WAAyB,SAAS3D,IAAc,SAASA,IAE5E,OADA,IAAAkC,UAASD,EAAS,CAAE2B,MAAO,YACpB,CACT,CAAE,MACA,OAAO,CACT,CACF,C,UClJAzF,EAAOC,QAAUC,QAAQ,gB,UCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,W,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBwF,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa7F,QAGrB,IAAID,EAAS0F,EAAyBG,GAAY,CAGjD5F,QAAS,CAAC,GAOX,OAHA+F,EAAoBH,GAAUI,KAAKjG,EAAOC,QAASD,EAAQA,EAAOC,QAAS2F,GAGpE5F,EAAOC,OACf,CCnB0B2F,CAAoB,K","sources":["webpack://syntaxility-code-formatter/external commonjs \"eslint\"","webpack://syntaxility-code-formatter/./src/extension.ts","webpack://syntaxility-code-formatter/external node-commonjs \"child_process\"","webpack://syntaxility-code-formatter/external commonjs \"vscode\"","webpack://syntaxility-code-formatter/external commonjs \"prettier\"","webpack://syntaxility-code-formatter/external node-commonjs \"os\"","webpack://syntaxility-code-formatter/external node-commonjs \"fs\"","webpack://syntaxility-code-formatter/external node-commonjs \"path\"","webpack://syntaxility-code-formatter/webpack/bootstrap","webpack://syntaxility-code-formatter/webpack/startup"],"sourcesContent":["module.exports = require(\"eslint\");","import * as vscode from \"vscode\";\nimport * as prettier from \"prettier\";\nimport { ESLint } from \"eslint\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { execSync } from \"child_process\";\nimport * as os from \"os\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log(\"SyntaxilitY Code Formatter is now active!\");\n\n  const config = vscode.workspace.getConfiguration(\"syntaxilityCodeFormatter\");\n  const userFormatters = config.get<{ [key: string]: string }>(\"formatters\", {});\n  const preCommitHookEnabled = config.get<boolean>(\"preCommitHook\", true);\n\n  let formatCommand = vscode.commands.registerCommand(\n    \"syntaxilityCodeFormatter.formatDocument\",\n    async () => {\n      const editor = vscode.window.activeTextEditor;\n      if (!editor) {\n        vscode.window.showErrorMessage(\"No active editor found!\");\n        return;\n      }\n\n      const { document, selections } = editor;\n      const text = document.getText();\n      const languageId = document.languageId;\n      const workspacePath = vscode.workspace.rootPath || \"\";\n\n      try {\n        let formattedText = text;\n        let formatter = userFormatters[languageId] || getDefaultFormatter(languageId);\n\n        // Check if the formatter is installed\n        if (!isFormatterInstalled(formatter)) {\n          vscode.window.showWarningMessage(`Formatter \"${formatter}\" not found. Using fallback: Prettier.`);\n          formatter = \"prettier\";\n        }\n\n        // Step 1: Prettier Formatting (if applicable)\n        if (formatter === \"prettier\") {\n\t\t\tif (!isFormatterInstalled(\"prettier\")) {\n\t\t\t\tvscode.window.showErrorMessage(\"Prettier is not installed! Install it using `npm install -g prettier`.\");\n\t\t\t\treturn;\n\t\t\t  }\n\t\t  \n          const prettierConfigPath = path.join(workspacePath, \".prettierrc.json\");\n          const prettierOptions = fs.existsSync(prettierConfigPath)\n            ? JSON.parse(fs.readFileSync(prettierConfigPath, \"utf8\"))\n            : { parser: getPrettierParser(languageId) };\n\n          formattedText = await prettier.format(text, prettierOptions);\n        }\n\n        // Step 2: ESLint Fixes (for JS/TS)\n        if (formatter === \"eslint\") {\n          if (!isFormatterInstalled(\"eslint\")) {\n            vscode.window.showErrorMessage(\"ESLint is not installed! Install it using `npm install -g eslint`.\");\n            return;\n          }\n\n          const eslint = new ESLint({ fix: true });\n          const results = await eslint.lintText(formattedText);\n          formattedText = results[0].output || formattedText;\n        }\n\n        // Step 3: Other Formatters\n        formattedText = runFormatter(formatter, formattedText);\n\n        // Step 4: Apply Formatting to Selected Text\n        editor.edit((editBuilder) => {\n          selections.forEach((selection) => {\n\t\t\teditBuilder.replace(selection.isEmpty ? new vscode.Range(0, 0, document.lineCount, 0) : selection, formattedText);\n\t\t});\n        });\n\n        vscode.window.showInformationMessage(`Formatted with ${formatter}!`);\n      } catch (error) {\n        console.error(\"SyntaxilitY Code Formatter Error:\", error);\n        vscode.window.showErrorMessage(`Formatting failed: ${(error as Error).message}`);\n      }\n    }\n  );\n\n  vscode.workspace.onWillSaveTextDocument((event) => {\n    if (config.get(\"autoFormatOnSave\", true)) {\n      vscode.commands.executeCommand(\"syntaxilityCodeFormatter.formatDocument\");\n    }\n  });\n\n  if (preCommitHookEnabled) {\n    setupGitPreCommitHook();\n  }\n\n  context.subscriptions.push(formatCommand);\n}\n\nexport function deactivate() {}\n\nfunction getDefaultFormatter(languageId: string): string {\n  const defaultFormatters: { [key: string]: string } = {\n    javascript: \"prettier\",\n    typescript: \"eslint\",\n    python: \"black\",\n    cpp: \"clang-format\",\n    go: \"gofmt\",\n    rust: \"rustfmt\",\n    java: \"google-java-format\",\n    sql: \"sql-formatter\",\n    yaml: \"prettier\",\n    markdown: \"markdown-it\",\n  };\n\n  return defaultFormatters[languageId] || \"prettier\";\n}\n\nfunction getPrettierParser(languageId: string): prettier.BuiltInParserName {\n\tswitch (languageId) {\n\t  case \"javascript\":\n\t  case \"typescript\":\n\t\treturn \"babel\";\n\t  case \"json\":\n\t\treturn \"json\";\n\t  case \"html\":\n\t\treturn \"html\";\n\t  case \"css\":\n\t  case \"scss\":\n\t  case \"less\":\n\t\treturn \"css\";\n\t  case \"yaml\":\n\t\treturn \"yaml\";\n\t  case \"markdown\":\n\t\treturn \"markdown\";\n\t  default:\n\t\treturn \"babel\"; // Default fallback\n\t}\n  }\n  \nfunction isFormatterInstalled(formatter: string): boolean {\n  try {\n    const command = os.platform() === \"win32\" ? `where ${formatter}` : `which ${formatter}`;\n    execSync(command, { stdio: \"ignore\" });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction runFormatter(command: string, text: string): string {\n  try {\n    return execSync(command, { input: text, encoding: \"utf8\" });\n  } catch (error) {\n    console.error(`Error running formatter ${command}:`, error);\n    return text;\n  }\n}\n\nfunction setupGitPreCommitHook() {\n  const workspacePath = vscode.workspace.rootPath;\n  if (!workspacePath) {return;};\n\n  const gitHookPath = path.join(workspacePath, \".git\", \"hooks\", \"pre-commit\");\n  if (fs.existsSync(gitHookPath)) {return;};\n\n  const hookScript = `#!/bin/sh\n  echo \"Running SyntaxilitY Code Formatter before commit...\"\n  npx syntaxility-code-formatter || echo \"Formatting failed, skipping commit.\"\n  git add .\n  `;\n\n  fs.writeFileSync(gitHookPath, hookScript);\n  fs.chmodSync(gitHookPath, \"755\");\n\n  vscode.window.showInformationMessage(\"Git pre-commit hook installed for auto-formatting.\");\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"prettier\");","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","require","context","console","log","config","vscode","workspace","getConfiguration","userFormatters","get","preCommitHookEnabled","formatCommand","commands","registerCommand","async","editor","window","activeTextEditor","showErrorMessage","document","selections","text","getText","languageId","workspacePath","rootPath","formattedText","formatter","javascript","typescript","python","cpp","go","rust","java","sql","yaml","markdown","getDefaultFormatter","isFormatterInstalled","showWarningMessage","prettierConfigPath","path","join","prettierOptions","fs","existsSync","JSON","parse","readFileSync","parser","getPrettierParser","prettier","format","eslint","ESLint","fix","results","lintText","output","command","execSync","input","encoding","error","runFormatter","edit","editBuilder","forEach","selection","replace","isEmpty","Range","lineCount","showInformationMessage","message","onWillSaveTextDocument","event","executeCommand","gitHookPath","writeFileSync","chmodSync","setupGitPreCommitHook","subscriptions","push","os","platform","stdio","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}