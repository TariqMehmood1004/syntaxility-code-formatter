{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://syntaxility-code-formatter/external commonjs \"eslint\"","webpack://syntaxility-code-formatter/./src/extension.ts","webpack://syntaxility-code-formatter/external node-commonjs \"child_process\"","webpack://syntaxility-code-formatter/external commonjs \"vscode\"","webpack://syntaxility-code-formatter/external commonjs \"prettier\"","webpack://syntaxility-code-formatter/external node-commonjs \"os\"","webpack://syntaxility-code-formatter/external node-commonjs \"fs\"","webpack://syntaxility-code-formatter/external node-commonjs \"path\"","webpack://syntaxility-code-formatter/webpack/bootstrap","webpack://syntaxility-code-formatter/webpack/startup"],"sourcesContent":["module.exports = require(\"eslint\");","import * as vscode from \"vscode\";\nimport * as prettier from \"prettier\";\nimport { ESLint } from \"eslint\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { execSync } from \"child_process\";\nimport * as os from \"os\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log(\"SyntaxilitY Code Formatter is now active!\");\n\n  try {\n    const config = vscode.workspace.getConfiguration(\"syntaxilityCodeFormatter\");\n    const userFormatters = config.get<{ [key: string]: string }>(\"formatters\", {}) || {};\n    const preCommitHookEnabled = config.get<boolean>(\"preCommitHook\", true);\n\n    let formatCommand = vscode.commands.registerCommand(\n      \"syntaxilityCodeFormatter.formatDocument\",\n      async () => {\n        try {\n          const editor = vscode.window.activeTextEditor;\n          if (!editor) {\n            vscode.window.showErrorMessage(\"No active editor found!\");\n            return;\n          }\n\n          const { document, selections } = editor;\n          const text = document.getText();\n          const languageId = document.languageId;\n          const workspacePath = vscode.workspace.rootPath || \"\";\n\n          let formattedText = text;\n          let formatter = userFormatters[languageId] || getDefaultFormatter(languageId);\n\n          // Check if formatter is installed\n          if (!isFormatterInstalled(formatter)) {\n            vscode.window.showWarningMessage(`Formatter \"${formatter}\" not found. Using fallback: Prettier.`);\n            formatter = \"prettier\";\n          }\n\n          // Step 1: Prettier Formatting\n          if (formatter === \"prettier\") {\n            if (!isFormatterInstalled(\"prettier\")) {\n              vscode.window.showErrorMessage(\"Prettier is not installed! Install it using `npm install -g prettier`.\");\n              return;\n            }\n\n            const prettierConfigPath = path.join(workspacePath, \".prettierrc.json\");\n            const prettierOptions = fs.existsSync(prettierConfigPath)\n              ? JSON.parse(fs.readFileSync(prettierConfigPath, \"utf8\"))\n              : { parser: getPrettierParser(languageId) };\n\n            formattedText = await prettier.format(text, prettierOptions);\n          }\n\n          // Step 2: ESLint Fixes\n          if (formatter === \"eslint\") {\n            if (!isFormatterInstalled(\"eslint\")) {\n              vscode.window.showErrorMessage(\"ESLint is not installed! Install it using `npm install -g eslint`.\");\n              return;\n            }\n\n            const eslint = new ESLint({ fix: true });\n            const results = await eslint.lintText(formattedText);\n            formattedText = results[0].output || formattedText;\n          }\n\n          // Step 3: Other Formatters\n          formattedText = runFormatter(formatter, formattedText);\n\n          // Step 4: Apply Formatting to Selected Text\n          editor.edit((editBuilder) => {\n            selections.forEach((selection) => {\n              editBuilder.replace(\n                selection.isEmpty ? new vscode.Range(0, 0, document.lineCount, 0) : selection,\n                formattedText\n              );\n            });\n          });\n\n          vscode.window.showInformationMessage(`Formatted with ${formatter}!`);\n        } catch (error) {\n          vscode.window.showErrorMessage(`Formatting failed: ${(error as Error).message}`);\n        }\n      }\n    );\n\n    vscode.workspace.onWillSaveTextDocument((event) => {\n      if (config.get(\"autoFormatOnSave\", true)) {\n        vscode.commands.executeCommand(\"syntaxilityCodeFormatter.formatDocument\");\n      }\n    });\n\n    if (preCommitHookEnabled) {\n      setupGitPreCommitHook();\n    }\n\n    context.subscriptions.push(formatCommand);\n  } catch (error) {\n    vscode.window.showErrorMessage(`Extension activation failed: ${(error as Error).message}`);\n  }\n}\n\nexport function deactivate() {}\n\nfunction getDefaultFormatter(languageId: string): string {\n  const defaultFormatters: { [key: string]: string } = {\n    javascript: \"prettier\",\n    typescript: \"eslint\",\n    python: \"black\",\n    cpp: \"clang-format\",\n    go: \"gofmt\",\n    rust: \"rustfmt\",\n    java: \"google-java-format\",\n    sql: \"sql-formatter\",\n    yaml: \"prettier\",\n    markdown: \"markdown-it\",\n  };\n\n  return defaultFormatters[languageId] || \"prettier\";\n}\n\nfunction getPrettierParser(languageId: string): prettier.BuiltInParserName {\n  switch (languageId) {\n    case \"javascript\":\n    case \"typescript\":\n      return \"babel\";\n    case \"json\":\n      return \"json\";\n    case \"html\":\n      return \"html\";\n    case \"css\":\n    case \"scss\":\n    case \"less\":\n      return \"css\";\n    case \"yaml\":\n      return \"yaml\";\n    case \"markdown\":\n      return \"markdown\";\n    default:\n      return \"babel\"; // Default fallback\n  }\n}\n\nfunction isFormatterInstalled(formatter: string): boolean {\n  try {\n    const command = os.platform() === \"win32\" ? `where ${formatter}` : `which ${formatter}`;\n    execSync(command, { stdio: \"ignore\" });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction runFormatter(command: string, text: string): string {\n  try {\n    return execSync(command, { input: text, encoding: \"utf8\" });\n  } catch (error) {\n    vscode.window.showErrorMessage(`Error running formatter ${command}: ${(error as Error).message}`);\n    return text;\n  }\n}\n\nfunction setupGitPreCommitHook() {\n  try {\n    const workspacePath = vscode.workspace.rootPath;\n    if (!workspacePath) {return;};\n\n    const gitHookPath = path.join(workspacePath, \".git\", \"hooks\", \"pre-commit\");\n    if (fs.existsSync(gitHookPath)) {return;};\n\n    const hookScript = `#!/bin/sh\n    echo \"Running SyntaxilitY Code Formatter before commit...\"\n    npx syntaxility-code-formatter || echo \"Formatting failed, skipping commit.\"\n    git add .\n    `;\n\n    fs.writeFileSync(gitHookPath, hookScript);\n    fs.chmodSync(gitHookPath, \"755\");\n\n    vscode.window.showInformationMessage(\"Git pre-commit hook installed for auto-formatting.\");\n  } catch (error) {\n    vscode.window.showErrorMessage(`Failed to set up Git pre-commit hook: ${(error as Error).message}`);\n  }\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"prettier\");","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","require","context","console","log","config","vscode","workspace","getConfiguration","userFormatters","get","preCommitHookEnabled","formatCommand","commands","registerCommand","async","editor","window","activeTextEditor","showErrorMessage","document","selections","text","getText","languageId","workspacePath","rootPath","formattedText","formatter","javascript","typescript","python","cpp","go","rust","java","sql","yaml","markdown","getDefaultFormatter","isFormatterInstalled","showWarningMessage","prettierConfigPath","path","join","prettierOptions","fs","existsSync","JSON","parse","readFileSync","parser","getPrettierParser","prettier","format","eslint","ESLint","fix","results","lintText","output","command","execSync","input","encoding","error","message","runFormatter","edit","editBuilder","forEach","selection","replace","isEmpty","Range","lineCount","showInformationMessage","onWillSaveTextDocument","event","executeCommand","gitHookPath","hookScript","writeFileSync","chmodSync","setupGitPreCommitHook","subscriptions","push","os","platform","stdio","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}